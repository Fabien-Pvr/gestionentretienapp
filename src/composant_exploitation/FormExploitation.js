import React, { useState } from "react";
import { ref as databaseRef, set } from "firebase/database";
import { db } from "../Firebase";

const FormExploitation = ({ onSuccess },IdUser) => {
  const [NomExploitation, setNomExploitation] = useState("");
  const [error, setError] = useState("");

  // Fonction pour générer un ID aléatoire
  const generateIdExploitation = () => {
    return `exp_${Date.now()}_${Math.floor(Math.random() * 1000000)}`;
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();
    const IdExploitation = generateIdExploitation();
    try {
     
      const exploitationRef = databaseRef(
        db,
        `Exploitation/${NomExploitation}`
      );
      const exploitationData = {
        IdExploitation,
        NomExploitation,
        Info: "Nouvelle exploitation agricole",
      };
      await set(exploitationRef, exploitationData);
      setNomExploitation("");
      setError("");

    } catch (error) {
      setError(
        "Une erreur est survenue lors de la création de l'exploitation."
      );
      console.error("Erreur lors de la création de l'exploitation :", error);
    }
  };
//   Dans FormExploitation.js
// const handleFormSubmit = async (e) => {
//   e.preventDefault();
//   const IdExploitation = generateIdExploitation(); 
//   try {
//     const exploitationRef = databaseRef(db, `Exploitation/${NomExploitation}`);
//     const exploitationData = {
//       IdExploitation,
//       NomExploitation,
//       Info: "Nouvelle exploitation agricole",
//     };

//     await set(exploitationRef, exploitationData);

//     // Ici, ajoutez l'IdUser à la nouvelle exploitation
//     const userRef = databaseRef(db, `Exploitation/${NomExploitation}/IdUsers`);
//     await set(userRef, { [IdUser]: IdUser });

//     setNomExploitation("");
//     setError("");
//     if (onSuccess) onSuccess(IdExploitation);  // Callback après la création réussie
//   } catch (error) {
//     setError("Une erreur est survenue lors de la création de l'exploitation.");
//     console.error("Erreur lors de la création de l'exploitation :", error);
//   }
// };


  return (
    <div>
      <form onSubmit={handleFormSubmit}>
        {error && <p style={{ color: "red" }}>{error}</p>}
        <label className="formExploitation-label">
          <input
            type="text"
            value={NomExploitation}
            onChange={(e) => setNomExploitation(e.target.value)}
            placeholder="Nom de l'exploitation"
            required
          />
        </label>
        <button type="submit">Créer</button>
      </form>
    </div>
  );
};

export default FormExploitation;
