import React, { useState, useEffect } from "react";
import { db } from "../Firebase";
import { ref as databaseRef, ref, set } from "firebase/database";
import { useNavigate } from "react-router-dom"; // Importez useNavigate

import { useAuth } from "../Component_Utilisateurs/AuthContext.js";
import { GetAllExploitations } from "../Component_queries/queries";
// import FormExploitation from "./FormExploitation.js";
import logo from "../image/LogoP2I.svg";

const FormExploitation = ({ setExploitationName }) => {
  return (
    <div>
      <label className="formExploitation-label">
        Nom de l'exploitation :
        <input
          type="text"
          onChange={(e) => setExploitationName(e.target.value)}
          placeholder="Nom de l'exploitation"
          required
        />
      </label>
    </div>
  );
};

const generateIdExploitation = () => {
  return `exp_${Date.now()}_${Math.floor(Math.random() * 1000000)}`;
};

const Exploitation = () => {
  const [exploitations, setExploitations] = useState([]);
  const [exploitation, setExploitation] = useState("");
  const [radioValue, setRadioValue] = useState("");
  const [newExploitationName, setNewExploitationName] = useState("");
  const navigate = useNavigate(); // Créez l'instance de navigate

  const { currentUser } = useAuth();
  const IdUser = currentUser ? currentUser.uid : null;

  useEffect(() => {
    const fetchExploitation = async () => {
      try {
        const exploitationList = await GetAllExploitations();
        if (Array.isArray(exploitationList)) {
          setExploitations(exploitationList);
        } else {
          setExploitations([]);
        }
      } catch (error) {
        console.error(
          "Erreur lors de la récupération des exploitations :",
          error.message
        );
      }
    };

    fetchExploitation();
  }, []);

  const finalizeInscription = () => {
    if (radioValue === "createExploitation" && newExploitationName) {
      // Logique pour créer une nouvelle exploitation
      const IdExploitation = generateIdExploitation();
      const exploitationRef = ref(db, `Exploitation/${newExploitationName}`);
      const exploitationData = {
        IdExploitation,
        NomExploitation: newExploitationName,
        Info: "Nouvelle exploitation agricole",
        IdUsers: { [IdUser]: IdUser }, // Ajoute directement l'IdUser lors de la création
      };

      set(exploitationRef, exploitationData)
        .then(() => {
          console.log("Nouvelle exploitation créée avec succès !");
          navigate("/home/materiel");
        })
        .catch((error) => {
          console.error(
            "Erreur lors de la création de l'exploitation :",
            error
          );
        });
    } else if (exploitation && IdUser && radioValue === "selectExploitation") {
      // Ajouter l'IdUser à l'exploitation existante
      const userRef = ref(db, `Exploitation/${exploitation}/IdUsers/${IdUser}`);
      set(userRef, IdUser)
        .then(() => {
          console.log("Utilisateur ajouté à l'exploitation avec succès !");
          navigate("/home/materiel");
        })
        .catch((error) => {
          console.error(
            "Erreur lors de l'ajout de l'utilisateur à l'exploitation :",
            error
          );
        });
    }
  };

  const handleRadioClick = (value) => {
    if (radioValue === value) {
      setRadioValue("");
    } else {
      setRadioValue(value);
      if (value === "createExploitation") {
      }
    }
  };

  return (
    <div>
      <div className="connexion-div-logo">
        <img src={logo} className="connexion-logo" alt="logo" />
      </div>
      <h1>Mon Exploitation</h1>
      <div>
        <div className="Inscription-radioInput-global">
          <label className="Inscription-radioInput">
            <input
              className="Inscription-radioInput-input"
              type="radio"
              name="exploitationChoice"
              value="selectExploitation"
              checked={radioValue === "selectExploitation"}
              onClick={() => handleRadioClick("selectExploitation")}
              readOnly
            />
            Sélectionnez une exploitation
          </label>
          {radioValue !== "selectExploitation" && (
            <label className="Inscription-radioInput">
              <input
                className="Inscription-radioInput-input"
                type="radio"
                name="exploitationChoice"
                value="createExploitation"
                checked={radioValue === "createExploitation"}
                onClick={() => handleRadioClick("createExploitation")}
                readOnly
              />
              Créer mon exploitation
            </label>
          )}
        </div>
        {radioValue === "selectExploitation" && (
          <div>
            <label className="InscriptionMenuDel">
              <select
                className="Inscription-selection-format"
                onChange={(e) => setExploitation(e.target.value)}
              >
                <option value="">Sélectionnez une exploitation</option>
                {exploitations.map((exp) => (
                  <option key={exp}>{exp}</option>
                ))}
              </select>
            </label>
          </div>
        )}

        {radioValue === "createExploitation" && (
          <div>
            <FormExploitation setExploitationName={setNewExploitationName} />
          </div>
        )}
      </div>
      <div>
        <button onClick={finalizeInscription}> Finaliser l'inscription</button>
      </div>
    </div>
  );
};

export default Exploitation;
